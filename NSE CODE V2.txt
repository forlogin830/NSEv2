from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from datetime import datetime
import time
import os
import sys
import requests

# Step 1: Ask user for date
while True:
    user_input = input("üìÖ Enter date (DD-MM-YYYY): ").strip()
    try:
        date_obj = datetime.strptime(user_input, "%d-%m-%Y")
        formatted_date = date_obj.strftime("%d-%b-%Y")
        file_date = date_obj.strftime("%d%m%Y")
        break
    except ValueError:
        print("‚ùå Invalid format. Please use DD-MM-YYYY.")

# Step 2: Setup download folder
download_dir = os.path.join(os.getcwd(), "downloads", file_date)
os.makedirs(download_dir, exist_ok=True)

# Step 3: Setup Chrome
options = Options()
options.add_argument("--start-maximized")
options.add_argument("--disable-blink-features=AutomationControlled")
options.add_argument("user-agent=Mozilla/5.0")

prefs = {
    "download.prompt_for_download": False,
    "download.directory_upgrade": True,
    "download.default_directory": download_dir,
    "safebrowsing.enabled": True
}
options.add_experimental_option("prefs", prefs)
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option("useAutomationExtension", False)

# Step 4: Launch browser
print("üåê Launching browser...")
try:
    driver = webdriver.Chrome(options=options)
except Exception as e:
    print(f"‚ùå WebDriver error: {e}")
    sys.exit(1)

try:
    # Step 5: Open NSE reports page
    print("üîó Opening NSE All Reports page...")
    driver.get("https://www.nseindia.com/all-reports")
    WebDriverWait(driver, 20).until(
        EC.presence_of_element_located((By.ID, "cr_equity_daily"))
    )
    time.sleep(3)

    # Step 6: Determine target section
    sections = [
        ("cr_equity_daily_Current", "cr_equity_currentDate"),
        ("cr_equity_daily_Previous", "cr_equity_prevDate")
    ]
    target_section_id = None
    for section_id, date_id in sections:
        try:
            page_date = driver.find_element(By.ID, date_id).text.strip()
            print(f"\nüìÑ {section_id} Date: {page_date}")
            if page_date == formatted_date:
                target_section_id = section_id
                break
        except:
            print(f"‚ö†Ô∏è Could not read date from {section_id}")

    # If not in current/previous, go to Archives
    if not target_section_id:
        print("üóÉÔ∏è Date not found. Switching to Archives...")
        try:
            driver.find_element(By.ID, "Archives_rpt").click()
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "cr_equity_archives_date"))
            )
            date_input = driver.find_element(By.ID, "cr_equity_archives_date")
            driver.execute_script(f"arguments[0].value = '{user_input}';", date_input)
            driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", date_input)
            time.sleep(3)
            target_section_id = "cr_equity_archives"
        except:
            print("‚ùå Could not access archives.")
            driver.quit()
            sys.exit(0)

    # Step 7: Download files from that section
    print(f"\nüì¶ Looking in section: {target_section_id}")
    report_cards = driver.find_elements(By.CSS_SELECTOR, f"#{target_section_id} .reportsDownload")

    targets = {"bulk": None, "block": None}
    for card in report_cards:
        try:
            text = card.find_element(By.CSS_SELECTOR, ".reportCardSegment.asondate").text.lower()
            if "bulk.csv" in text:
                targets["bulk"] = card
            elif "block.csv" in text:
                targets["block"] = card
        except:
            continue

    for label, card in targets.items():
        if card:
            file_url = card.get_attribute("data-link")
            if file_url and file_url.startswith("http"):
                try:
                    driver.execute_script(f"window.location.href='{file_url}';")
                    print(f"‚¨áÔ∏è Initiated download for {label}.csv")
                    time.sleep(3)
                except Exception as e:
                    print(f"‚ö†Ô∏è Error during Selenium download for {label}: {e}")
            else:
                print(f"‚ùå Invalid link for {label}: {file_url}")
        else:
            print(f"‚ùå {label} report not found on NSE page.")

    # Step 8: Wait and rename if files are downloaded
    for label in ["bulk", "block"]:
        expected_file = os.path.join(download_dir, f"{label}.csv")
        renamed_file = os.path.join(download_dir, f"{label}_{file_date}.csv")

        for _ in range(20):
            if os.path.exists(expected_file):
                os.rename(expected_file, renamed_file)
                print(f"‚úÖ Saved: {renamed_file}")
                break
            time.sleep(1)
        else:
            print(f"‚ö†Ô∏è Selenium download not found for {label}. Trying fallback...")

            # Step 9: Fallback using requests
            fallback_url = f"https://nsearchives.nseindia.com/content/equities/{label}.csv"
            try:
                r = requests.get(fallback_url, timeout=10)
                if r.status_code == 200 and r.content:
                    with open(renamed_file, "wb") as f:
                        f.write(r.content)
                    print(f"‚úÖ Fallback downloaded: {renamed_file}")
                else:
                    print(f"‚ùå Fallback failed: {fallback_url} returned {r.status_code}")
            except Exception as e:
                print(f"‚ùå Fallback error for {label}: {e}")

except Exception as e:
    print(f"‚ùå Fatal error: {e}")

finally:
    driver.quit()
    print("‚úÖ Done. Browser closed.")
